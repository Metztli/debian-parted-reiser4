From 4b014429c3b2d3c56696a1b832bc5d366fac2828 Mon Sep 17 00:00:00 2001
From: Phillip Susi <psusi@ubuntu.com>
Date: Fri, 28 Mar 2014 17:10:27 +0000
Subject: Fix loop labels

Loop labels were incorrectly identifying the device for the fictional
partition as $dev1 instead of just $dev.  This caused other programs
like gparted to be confused, and caused parted to fail to identify the
partition as busy due to the fact that it was looking for the wrong
device.  Parted also actually created the partition device so your raw
fs on $dev gained an alias as $dev1.  Finally, writing the label back to
the disk clobbered the filesystem there if it used the first sector.
Several filesystems end up using the first sector for 2048/4096 byte
sectors even though they don't for 512/1024 byte sectors.

Forwarded: yes
Last-Update: 2014-07-07

Patch-Name: fix-loop-labels.patch
---
 include/parted/device.h               |  1 +
 libparted/arch/linux.c                | 20 +++++++++++++---
 libparted/device.c                    |  1 +
 libparted/disk.c                      |  2 ++
 libparted/fs/ntfs/ntfs.c              |  2 +-
 libparted/labels/dos.c                | 29 +++++++++++++++++++++++
 libparted/labels/loop.c               | 43 ++++++++++++-----------------------
 partprobe/partprobe.c                 |  2 --
 scripts/data/abi/baseline_symbols.txt |  1 +
 9 files changed, 67 insertions(+), 34 deletions(-)

diff --git a/include/parted/device.h b/include/parted/device.h
index 525033f..9666637 100644
--- a/include/parted/device.h
+++ b/include/parted/device.h
@@ -92,6 +92,7 @@ struct _PedDevice {
         short           host, did;
 
         void*           arch_specific;
+        int             loop;           /* using "loop" partition table */
 };
 
 #include <parted/natmath.h>
diff --git a/libparted/arch/linux.c b/libparted/arch/linux.c
index 85c3d48..a4e1fa7 100644
--- a/libparted/arch/linux.c
+++ b/libparted/arch/linux.c
@@ -2313,10 +2313,15 @@ _device_get_part_path (PedDevice *dev, int num)
         size_t path_len = strlen (devpath);
 
         char *result;
+
+        /* bare device, no partitions */
+        if (dev->loop)
+                result = strdup (devpath);
+
         /* Check for devfs-style /disc => /partN transformation
            unconditionally; the system might be using udev with devfs rules,
            and if not the test is harmless. */
-        if (5 < path_len && !strcmp (devpath + path_len - 5, "/disc")) {
+        else if (5 < path_len && !strcmp (devpath + path_len - 5, "/disc")) {
                 /* replace /disc with /part%d */
                 result = zasprintf ("%.*s/part%d",
                                     (int) (path_len - 5), devpath, num);
@@ -2731,7 +2736,10 @@ _disk_sync_part_table (PedDisk* disk)
         int i;
         /* remove old partitions first */
         for (i = 1; i <= lpn; i++) {
-                PedPartition *part = ped_disk_get_partition (disk, i);
+                PedPartition *part;
+                if (disk->dev->loop)
+                        part = 0;
+                else part = ped_disk_get_partition (disk, i);
                 if (part) {
                         unsigned long long length;
                         unsigned long long start;
@@ -2752,7 +2760,10 @@ _disk_sync_part_table (PedDisk* disk)
                 unsigned int n_sleep = (max_sleep_seconds
                                         * 1000000 / sleep_microseconds);
                 do {
+                        int loop = disk->dev->loop;
+                        disk->dev->loop = 0; /* disable so we can remove non loop partitions */
                         ok[i-1] = remove_partition (disk, i);
+                        disk->dev->loop = loop;
                         errnums[i-1] = errno;
                         if (ok[i-1] || errnums[i-1] != EBUSY)
                                 break;
@@ -2762,7 +2773,10 @@ _disk_sync_part_table (PedDisk* disk)
                         ok[i-1] = 1; /* it already doesn't exist */
         }
         for (i = 1; i <= lpn; i++) {
-                PedPartition *part = ped_disk_get_partition (disk, i);
+                PedPartition *part;
+                if (disk->dev->loop)
+                        part = 0;
+                else part = ped_disk_get_partition (disk, i);
                 if (part) {
                         unsigned long long length;
                         unsigned long long start;
diff --git a/libparted/device.c b/libparted/device.c
index 738b320..9d5931c 100644
--- a/libparted/device.c
+++ b/libparted/device.c
@@ -173,6 +173,7 @@ ped_device_get (const char* path)
 	free (normal_path);
 	if (!walk)
 		return NULL;
+	walk->loop = 0;
 	_device_register (walk);
 	return walk;
 }
diff --git a/libparted/disk.c b/libparted/disk.c
index c4b1a01..a88a2d5 100644
--- a/libparted/disk.c
+++ b/libparted/disk.c
@@ -383,6 +383,7 @@ ped_disk_new_fresh (PedDevice* dev, const PedDiskType* type)
 	PED_ASSERT (disk->update_mode == 0);
 
 	disk->needs_clobber = 1;
+	dev->loop = 0;
 	return disk;
 
 error_destroy_disk:
@@ -495,6 +496,7 @@ ped_disk_commit_to_dev (PedDisk* disk)
 			goto error_close_dev;
 		disk->needs_clobber = 0;
 	}
+	disk->dev->loop = 0;
 	if (!disk->type->ops->write (disk))
 		goto error_close_dev;
 	ped_device_close (disk->dev);
diff --git a/libparted/fs/ntfs/ntfs.c b/libparted/fs/ntfs/ntfs.c
index 4c92d9e..0d2a34b 100644
--- a/libparted/fs/ntfs/ntfs.c
+++ b/libparted/fs/ntfs/ntfs.c
@@ -34,7 +34,7 @@
 
 #define NTFS_SIGNATURE	"NTFS"
 
-static PedGeometry*
+PedGeometry*
 ntfs_probe (PedGeometry* geom)
 {
 	char	buf[512];
diff --git a/libparted/labels/dos.c b/libparted/labels/dos.c
index 869087b..812ab95 100644
--- a/libparted/labels/dos.c
+++ b/libparted/labels/dos.c
@@ -232,12 +232,23 @@ maybe_FAT (unsigned char const *s)
   return true;
 }
 
+PedGeometry*
+fat_probe_fat16 (PedGeometry* geom);
+
+PedGeometry*
+fat_probe_fat32 (PedGeometry* geom);
+
+PedGeometry*
+ntfs_probe (PedGeometry* geom);
+
 static int
 msdos_probe (const PedDevice *dev)
 {
 	PedDiskType*	disk_type;
 	DosRawTable*	part_table;
 	int		i;
+	PedGeometry *geom = NULL;
+	PedGeometry *fsgeom = NULL;
 
 	PED_ASSERT (dev != NULL);
 
@@ -254,6 +265,20 @@ msdos_probe (const PedDevice *dev)
 	if (PED_LE16_TO_CPU (part_table->magic) != MSDOS_MAGIC)
 		goto probe_fail;
 
+	geom = ped_geometry_new (dev, 0, dev->length);
+	if (!geom)
+		return 0;
+	fsgeom = fat_probe_fat16 (geom);
+	if (fsgeom)
+		goto probe_fail; /* fat fs looks like dos mbr */
+	fsgeom = fat_probe_fat32 (geom);
+	if (fsgeom)
+		goto probe_fail; /* fat fs looks like dos mbr */
+	fsgeom = ntfs_probe (geom);
+	if (fsgeom)
+		goto probe_fail; /* ntfs fs looks like dos mbr */
+	ped_geometry_destroy (geom);
+	geom = NULL;
 	/* If this is a FAT fs, fail here.  Checking for the FAT signature
 	 * has some false positives; instead, do what the Linux kernel does
 	 * and ensure that each partition has a boot indicator that is
@@ -300,6 +325,10 @@ msdos_probe (const PedDevice *dev)
 	return 1;
 
  probe_fail:
+	if (geom)
+		ped_geometry_destroy (geom);
+	if (fsgeom)
+		ped_geometry_destroy (fsgeom);
 	free (label);
 	return 0;
 }
diff --git a/libparted/labels/loop.c b/libparted/labels/loop.c
index e96e9e6..aabeb34 100644
--- a/libparted/labels/loop.c
+++ b/libparted/labels/loop.c
@@ -80,7 +80,10 @@ loop_alloc (const PedDevice* dev)
 
 	if (dev->length < 256)
 		return NULL;
-	return _ped_disk_alloc ((PedDevice*)dev, &loop_disk_type);
+	PedDisk *disk = _ped_disk_alloc ((PedDevice*)dev, &loop_disk_type);
+	if (disk)
+		disk->disk_specific = (void *)0;
+	return disk;
 }
 
 static PedDisk*
@@ -118,18 +121,12 @@ loop_read (PedDisk* disk)
 
         int found_sig = !strncmp (buf, LOOP_SIGNATURE, strlen (LOOP_SIGNATURE));
         free (buf);
-
-        if (found_sig) {
-		ped_constraint_destroy (constraint_any);
-		return 1;
-        }
-
 	geom = ped_geometry_new (dev, 0, dev->length);
 	if (!geom)
 		goto error;
 
 	fs_type = ped_file_system_probe (geom);
-	if (!fs_type)
+	if (!fs_type && !found_sig)
 		goto error_free_geom;
 
 	part = ped_partition_new (disk, PED_PARTITION_NORMAL,
@@ -142,6 +139,8 @@ loop_read (PedDisk* disk)
 	if (!ped_disk_add_partition (disk, part, constraint_any))
 		goto error;
 	ped_constraint_destroy (constraint_any);
+	dev->loop = 1;
+	disk->disk_specific = (void *)1; /* don't rewrite label */
 	return 1;
 
 error_free_geom:
@@ -156,29 +155,17 @@ static int
 loop_write (const PedDisk* disk)
 {
 	size_t buflen = disk->dev->sector_size;
-	char *buf = ped_malloc (buflen);
-	if (buf == NULL)
-		return 0;
-
-	if (ped_disk_get_partition (disk, 1)) {
-		if (!ped_device_read (disk->dev, buf, 0, 1)) {
-			free (buf);
-			return 0;
-		}
-		if (strncmp (buf, LOOP_SIGNATURE, strlen (LOOP_SIGNATURE)) != 0) {
-			free (buf);
-			return 1;
-                }
-		memset (buf, 0, strlen (LOOP_SIGNATURE));
-		return ped_device_write (disk->dev, buf, 0, 1);
-	}
+	char *buf = alloca (buflen);
+	disk->dev->loop = 1;
+	/* only write label after creating it new */
+	if (disk->disk_specific)
+		return 1;
 
 	memset (buf, 0, buflen);
 	strcpy (buf, LOOP_SIGNATURE);
-
-        int write_ok = ped_device_write (disk->dev, buf, 0, 1);
-        free (buf);
-	return write_ok;
+        if (!ped_device_write (disk->dev, buf, 0, 1))
+		return 0;
+	return 1;
 }
 #endif /* !DISCOVER_ONLY */
 
diff --git a/partprobe/partprobe.c b/partprobe/partprobe.c
index 8bccc4f..da61fe5 100644
--- a/partprobe/partprobe.c
+++ b/partprobe/partprobe.c
@@ -109,8 +109,6 @@ process_dev (PedDevice* dev)
 	PedDisk*	disk;
 
 	disk_type = ped_disk_probe (dev);
-	if (!disk_type || !strcmp (disk_type->name, "loop"))
-		return 1;
 
 	disk = ped_disk_new (dev);
 	if (!disk)
diff --git a/scripts/data/abi/baseline_symbols.txt b/scripts/data/abi/baseline_symbols.txt
index 7856da6..5fa9721 100644
--- a/scripts/data/abi/baseline_symbols.txt
+++ b/scripts/data/abi/baseline_symbols.txt
@@ -226,6 +226,7 @@ FUNC:last_component
 FUNC:locale_charset
 FUNC:mdir_name
 FUNC:mmalloca
+FUNC:ntfs_probe
 FUNC:parse_long_options
 FUNC:ped_alignment_align_down
 FUNC:ped_alignment_align_nearest
