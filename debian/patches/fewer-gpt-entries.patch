Description: Handle GPT labels with fewer than 128 partition entries
Author: Robert Herndon <Robert.Herndon@quantum.com>
Author: Jim Meyering <meyering@redhat.com>
Origin: upstream, http://git.savannah.gnu.org/cgit/parted.git/commit?id=bb4e43862127054f2b8744b9d8812cba78912bbb
Origin: upstream, http://git.savannah.gnu.org/cgit/parted.git/commit?id=ce85c5145ed5e267eacee338204cc777377e6b02
Origin: upstream, http://git.savannah.gnu.org/cgit/parted.git/commit?id=b1e4a02c3f905ca566175e3c62cfa0c2a7cb1c1a
Origin: upstream, http://git.savannah.gnu.org/cgit/parted.git/commit?id=6d69c7183ec30e245834ed04b8755e3bc938b455
Bug-Ubuntu: https://bugs.launchpad.net/bugs/1187560
Forwarded: not-needed
Last-Update: 2013-06-17

Index: b/libparted/labels/gpt.c
===================================================================
--- a/libparted/labels/gpt.c
+++ b/libparted/labels/gpt.c
@@ -838,9 +838,8 @@
 gpt_read_PE_array (PedDisk const *disk, GuidPartitionTableHeader_t const *gpt,
                    size_t *ptes_bytes)
 {
-  GPTDiskData *gpt_disk_data = disk->disk_specific;
   uint32_t p_ent_size = PED_LE32_TO_CPU (gpt->SizeOfPartitionEntry);
-  *ptes_bytes = p_ent_size * gpt_disk_data->entry_count;
+  *ptes_bytes = p_ent_size * PED_LE32_TO_CPU(gpt->NumberOfPartitionEntries);
   size_t ptes_sectors = ped_div_round_up (*ptes_bytes,
                                           disk->dev->sector_size);
 
@@ -1513,13 +1512,15 @@
 
   if (alternate)
     {
-      PedSector ptes_size = gpt_disk_data->entry_count
-        * sizeof (GuidPartitionEntry_t) / disk->dev->sector_size;
+      size_t ss = disk->dev->sector_size;
+      PedSector ptes_bytes = (gpt_disk_data->entry_count
+      		 	          * sizeof (GuidPartitionEntry_t));
+      PedSector ptes_sectors = (ptes_bytes + ss - 1) / ss;
 
       gpt->MyLBA = PED_CPU_TO_LE64 (disk->dev->length - 1);
       gpt->AlternateLBA = PED_CPU_TO_LE64 (1);
       gpt->PartitionEntryLBA
-        = PED_CPU_TO_LE64 (disk->dev->length - 1 - ptes_size);
+        = PED_CPU_TO_LE64 (disk->dev->length - 1 - ptes_sectors);
     }
   else
     {
@@ -1572,12 +1573,10 @@
 gpt_write (const PedDisk *disk)
 {
   GPTDiskData *gpt_disk_data;
-  GuidPartitionEntry_t *ptes;
   uint32_t ptes_crc;
   uint8_t *pth_raw;
   GuidPartitionTableHeader_t *gpt;
   PedPartition *part;
-  int ptes_size;
 
   PED_ASSERT (disk != NULL, goto error);
   PED_ASSERT (disk->dev != NULL, goto error);
@@ -1585,11 +1584,12 @@
 
   gpt_disk_data = disk->disk_specific;
 
-  ptes_size = sizeof (GuidPartitionEntry_t) * gpt_disk_data->entry_count;
-  ptes = (GuidPartitionEntry_t *) ped_malloc (ptes_size);
+  size_t ptes_bytes = (gpt_disk_data->entry_count
+  	  	     * sizeof (GuidPartitionEntry_t));
+  GuidPartitionEntry_t *ptes = malloc (ptes_bytes);
   if (!ptes)
     goto error;
-  memset (ptes, 0, ptes_size);
+  memset (ptes, 0, ptes_bytes);
   for (part = ped_disk_next_partition (disk, NULL); part;
        part = ped_disk_next_partition (disk, part))
     {
@@ -1598,7 +1598,7 @@
       _partition_generate_part_entry (part, &ptes[part->num - 1]);
     }
 
-  ptes_crc = efi_crc32 (ptes, ptes_size);
+  ptes_crc = efi_crc32 (ptes, ptes_bytes);
 
   if (is_apple) {
     /* Write synced MBR */
@@ -1622,8 +1622,9 @@
   free (pth_raw);
   if (!write_ok)
     goto error_free_ptes;
-  if (!ped_device_write (disk->dev, ptes, 2,
-                         ptes_size / disk->dev->sector_size))
+  size_t ss = disk->dev->sector_size;
+  PedSector ptes_sectors = (ptes_bytes + ss - 1) / ss;
+  if (!ped_device_write (disk->dev, ptes, 2, ptes_sectors))
     goto error_free_ptes;
 
   /* Write Alternate PTH & PTEs */
@@ -1639,9 +1640,7 @@
   if (!write_ok)
     goto error_free_ptes;
   if (!ped_device_write (disk->dev, ptes,
-                         disk->dev->length - 1 -
-                         ptes_size / disk->dev->sector_size,
-                         ptes_size / disk->dev->sector_size))
+                         disk->dev->length - 1 - ptes_sectors, ptes_sectors))
     goto error_free_ptes;
 
   free (ptes);
